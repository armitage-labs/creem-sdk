/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * String representing the environment.
 */
export const OrderEntityMode = {
  Test: "test",
  Live: "live",
  Sandbox: "sandbox",
} as const;
/**
 * String representing the environment.
 */
export type OrderEntityMode = ClosedEnum<typeof OrderEntityMode>;

/**
 * The the customer who placed the order.
 */
export type OrderEntityCustomer = {};

/**
 * The the product associated with the order.
 */
export type OrderEntityProduct = {};

/**
 * Current status of the order.
 */
export const OrderEntityStatus = {
  Pending: "pending",
  Paid: "paid",
} as const;
/**
 * Current status of the order.
 */
export type OrderEntityStatus = ClosedEnum<typeof OrderEntityStatus>;

/**
 * The type of order. This can specify whether it’s a regular purchase, subscription, etc.
 */
export const OrderEntityType = {
  Subscription: "subscription",
  Purchase: "purchase",
} as const;
/**
 * The type of order. This can specify whether it’s a regular purchase, subscription, etc.
 */
export type OrderEntityType = ClosedEnum<typeof OrderEntityType>;

export type OrderEntity = {
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the environment.
   */
  mode: OrderEntityMode;
  /**
   * String representing the object’s type. Objects of the same type share the same value.
   */
  object: string;
  /**
   * The the customer who placed the order.
   */
  customer?: OrderEntityCustomer | undefined;
  /**
   * The the product associated with the order.
   */
  product: OrderEntityProduct;
  /**
   * The total amount of the order in cents. 1000 = $10.00
   */
  amount: number;
  /**
   * Three-letter ISO currency code, in uppercase. Must be a supported currency.
   */
  currency: string;
  /**
   * The amount in the foreign currency, if applicable.
   */
  fxAmount?: number | undefined;
  /**
   * Three-letter ISO code of the foreign currency, if applicable.
   */
  fxCurrency?: string | undefined;
  /**
   * The exchange rate used for converting between currencies, if applicable.
   */
  fxRate?: number | undefined;
  /**
   * Current status of the order.
   */
  status: OrderEntityStatus;
  /**
   * The type of order. This can specify whether it’s a regular purchase, subscription, etc.
   */
  type: OrderEntityType;
  /**
   * T affiliate associated with the order, if applicable.
   */
  affiliate?: string | undefined;
  /**
   * Creation date of the order
   */
  createdAt: Date;
  /**
   * Last updated date of the order
   */
  updatedAt: Date;
};

/** @internal */
export const OrderEntityMode$inboundSchema: z.ZodNativeEnum<
  typeof OrderEntityMode
> = z.nativeEnum(OrderEntityMode);

/** @internal */
export const OrderEntityMode$outboundSchema: z.ZodNativeEnum<
  typeof OrderEntityMode
> = OrderEntityMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderEntityMode$ {
  /** @deprecated use `OrderEntityMode$inboundSchema` instead. */
  export const inboundSchema = OrderEntityMode$inboundSchema;
  /** @deprecated use `OrderEntityMode$outboundSchema` instead. */
  export const outboundSchema = OrderEntityMode$outboundSchema;
}

/** @internal */
export const OrderEntityCustomer$inboundSchema: z.ZodType<
  OrderEntityCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OrderEntityCustomer$Outbound = {};

/** @internal */
export const OrderEntityCustomer$outboundSchema: z.ZodType<
  OrderEntityCustomer$Outbound,
  z.ZodTypeDef,
  OrderEntityCustomer
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderEntityCustomer$ {
  /** @deprecated use `OrderEntityCustomer$inboundSchema` instead. */
  export const inboundSchema = OrderEntityCustomer$inboundSchema;
  /** @deprecated use `OrderEntityCustomer$outboundSchema` instead. */
  export const outboundSchema = OrderEntityCustomer$outboundSchema;
  /** @deprecated use `OrderEntityCustomer$Outbound` instead. */
  export type Outbound = OrderEntityCustomer$Outbound;
}

export function orderEntityCustomerToJSON(
  orderEntityCustomer: OrderEntityCustomer,
): string {
  return JSON.stringify(
    OrderEntityCustomer$outboundSchema.parse(orderEntityCustomer),
  );
}

export function orderEntityCustomerFromJSON(
  jsonString: string,
): SafeParseResult<OrderEntityCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderEntityCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderEntityCustomer' from JSON`,
  );
}

/** @internal */
export const OrderEntityProduct$inboundSchema: z.ZodType<
  OrderEntityProduct,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OrderEntityProduct$Outbound = {};

/** @internal */
export const OrderEntityProduct$outboundSchema: z.ZodType<
  OrderEntityProduct$Outbound,
  z.ZodTypeDef,
  OrderEntityProduct
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderEntityProduct$ {
  /** @deprecated use `OrderEntityProduct$inboundSchema` instead. */
  export const inboundSchema = OrderEntityProduct$inboundSchema;
  /** @deprecated use `OrderEntityProduct$outboundSchema` instead. */
  export const outboundSchema = OrderEntityProduct$outboundSchema;
  /** @deprecated use `OrderEntityProduct$Outbound` instead. */
  export type Outbound = OrderEntityProduct$Outbound;
}

export function orderEntityProductToJSON(
  orderEntityProduct: OrderEntityProduct,
): string {
  return JSON.stringify(
    OrderEntityProduct$outboundSchema.parse(orderEntityProduct),
  );
}

export function orderEntityProductFromJSON(
  jsonString: string,
): SafeParseResult<OrderEntityProduct, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderEntityProduct$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderEntityProduct' from JSON`,
  );
}

/** @internal */
export const OrderEntityStatus$inboundSchema: z.ZodNativeEnum<
  typeof OrderEntityStatus
> = z.nativeEnum(OrderEntityStatus);

/** @internal */
export const OrderEntityStatus$outboundSchema: z.ZodNativeEnum<
  typeof OrderEntityStatus
> = OrderEntityStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderEntityStatus$ {
  /** @deprecated use `OrderEntityStatus$inboundSchema` instead. */
  export const inboundSchema = OrderEntityStatus$inboundSchema;
  /** @deprecated use `OrderEntityStatus$outboundSchema` instead. */
  export const outboundSchema = OrderEntityStatus$outboundSchema;
}

/** @internal */
export const OrderEntityType$inboundSchema: z.ZodNativeEnum<
  typeof OrderEntityType
> = z.nativeEnum(OrderEntityType);

/** @internal */
export const OrderEntityType$outboundSchema: z.ZodNativeEnum<
  typeof OrderEntityType
> = OrderEntityType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderEntityType$ {
  /** @deprecated use `OrderEntityType$inboundSchema` instead. */
  export const inboundSchema = OrderEntityType$inboundSchema;
  /** @deprecated use `OrderEntityType$outboundSchema` instead. */
  export const outboundSchema = OrderEntityType$outboundSchema;
}

/** @internal */
export const OrderEntity$inboundSchema: z.ZodType<
  OrderEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  mode: OrderEntityMode$inboundSchema,
  object: z.string(),
  customer: z.lazy(() => OrderEntityCustomer$inboundSchema).optional(),
  product: z.lazy(() => OrderEntityProduct$inboundSchema),
  amount: z.number(),
  currency: z.string(),
  fx_amount: z.number().optional(),
  fx_currency: z.string().optional(),
  fx_rate: z.number().optional(),
  status: OrderEntityStatus$inboundSchema,
  type: OrderEntityType$inboundSchema,
  affiliate: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "fx_amount": "fxAmount",
    "fx_currency": "fxCurrency",
    "fx_rate": "fxRate",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type OrderEntity$Outbound = {
  id: string;
  mode: string;
  object: string;
  customer?: OrderEntityCustomer$Outbound | undefined;
  product: OrderEntityProduct$Outbound;
  amount: number;
  currency: string;
  fx_amount?: number | undefined;
  fx_currency?: string | undefined;
  fx_rate?: number | undefined;
  status: string;
  type: string;
  affiliate?: string | undefined;
  created_at: string;
  updated_at: string;
};

/** @internal */
export const OrderEntity$outboundSchema: z.ZodType<
  OrderEntity$Outbound,
  z.ZodTypeDef,
  OrderEntity
> = z.object({
  id: z.string(),
  mode: OrderEntityMode$outboundSchema,
  object: z.string(),
  customer: z.lazy(() => OrderEntityCustomer$outboundSchema).optional(),
  product: z.lazy(() => OrderEntityProduct$outboundSchema),
  amount: z.number(),
  currency: z.string(),
  fxAmount: z.number().optional(),
  fxCurrency: z.string().optional(),
  fxRate: z.number().optional(),
  status: OrderEntityStatus$outboundSchema,
  type: OrderEntityType$outboundSchema,
  affiliate: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    fxAmount: "fx_amount",
    fxCurrency: "fx_currency",
    fxRate: "fx_rate",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderEntity$ {
  /** @deprecated use `OrderEntity$inboundSchema` instead. */
  export const inboundSchema = OrderEntity$inboundSchema;
  /** @deprecated use `OrderEntity$outboundSchema` instead. */
  export const outboundSchema = OrderEntity$outboundSchema;
  /** @deprecated use `OrderEntity$Outbound` instead. */
  export type Outbound = OrderEntity$Outbound;
}

export function orderEntityToJSON(orderEntity: OrderEntity): string {
  return JSON.stringify(OrderEntity$outboundSchema.parse(orderEntity));
}

export function orderEntityFromJSON(
  jsonString: string,
): SafeParseResult<OrderEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderEntity' from JSON`,
  );
}
