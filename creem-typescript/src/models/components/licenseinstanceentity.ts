/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * String representing the environment.
 */
export const LicenseInstanceEntityMode = {
  Test: "test",
  Live: "live",
  Sandbox: "sandbox",
} as const;
/**
 * String representing the environment.
 */
export type LicenseInstanceEntityMode = ClosedEnum<
  typeof LicenseInstanceEntityMode
>;

/**
 * The status of the license instance.
 */
export const LicenseInstanceEntityStatus = {
  Active: "active",
  Deactivated: "deactivated",
} as const;
/**
 * The status of the license instance.
 */
export type LicenseInstanceEntityStatus = ClosedEnum<
  typeof LicenseInstanceEntityStatus
>;

export type LicenseInstanceEntity = {
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the environment.
   */
  mode: LicenseInstanceEntityMode;
  /**
   * A string representing the objectâ€™s type. Objects of the same type share the same value.
   */
  object: string;
  /**
   * The name of the license instance.
   */
  name: string;
  /**
   * The status of the license instance.
   */
  status: LicenseInstanceEntityStatus;
  /**
   * The creation date of the license instance.
   */
  createdAt: Date;
};

/** @internal */
export const LicenseInstanceEntityMode$inboundSchema: z.ZodNativeEnum<
  typeof LicenseInstanceEntityMode
> = z.nativeEnum(LicenseInstanceEntityMode);

/** @internal */
export const LicenseInstanceEntityMode$outboundSchema: z.ZodNativeEnum<
  typeof LicenseInstanceEntityMode
> = LicenseInstanceEntityMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LicenseInstanceEntityMode$ {
  /** @deprecated use `LicenseInstanceEntityMode$inboundSchema` instead. */
  export const inboundSchema = LicenseInstanceEntityMode$inboundSchema;
  /** @deprecated use `LicenseInstanceEntityMode$outboundSchema` instead. */
  export const outboundSchema = LicenseInstanceEntityMode$outboundSchema;
}

/** @internal */
export const LicenseInstanceEntityStatus$inboundSchema: z.ZodNativeEnum<
  typeof LicenseInstanceEntityStatus
> = z.nativeEnum(LicenseInstanceEntityStatus);

/** @internal */
export const LicenseInstanceEntityStatus$outboundSchema: z.ZodNativeEnum<
  typeof LicenseInstanceEntityStatus
> = LicenseInstanceEntityStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LicenseInstanceEntityStatus$ {
  /** @deprecated use `LicenseInstanceEntityStatus$inboundSchema` instead. */
  export const inboundSchema = LicenseInstanceEntityStatus$inboundSchema;
  /** @deprecated use `LicenseInstanceEntityStatus$outboundSchema` instead. */
  export const outboundSchema = LicenseInstanceEntityStatus$outboundSchema;
}

/** @internal */
export const LicenseInstanceEntity$inboundSchema: z.ZodType<
  LicenseInstanceEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  mode: LicenseInstanceEntityMode$inboundSchema,
  object: z.string(),
  name: z.string(),
  status: LicenseInstanceEntityStatus$inboundSchema,
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type LicenseInstanceEntity$Outbound = {
  id: string;
  mode: string;
  object: string;
  name: string;
  status: string;
  created_at: string;
};

/** @internal */
export const LicenseInstanceEntity$outboundSchema: z.ZodType<
  LicenseInstanceEntity$Outbound,
  z.ZodTypeDef,
  LicenseInstanceEntity
> = z.object({
  id: z.string(),
  mode: LicenseInstanceEntityMode$outboundSchema,
  object: z.string(),
  name: z.string(),
  status: LicenseInstanceEntityStatus$outboundSchema,
  createdAt: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LicenseInstanceEntity$ {
  /** @deprecated use `LicenseInstanceEntity$inboundSchema` instead. */
  export const inboundSchema = LicenseInstanceEntity$inboundSchema;
  /** @deprecated use `LicenseInstanceEntity$outboundSchema` instead. */
  export const outboundSchema = LicenseInstanceEntity$outboundSchema;
  /** @deprecated use `LicenseInstanceEntity$Outbound` instead. */
  export type Outbound = LicenseInstanceEntity$Outbound;
}

export function licenseInstanceEntityToJSON(
  licenseInstanceEntity: LicenseInstanceEntity,
): string {
  return JSON.stringify(
    LicenseInstanceEntity$outboundSchema.parse(licenseInstanceEntity),
  );
}

export function licenseInstanceEntityFromJSON(
  jsonString: string,
): SafeParseResult<LicenseInstanceEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LicenseInstanceEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LicenseInstanceEntity' from JSON`,
  );
}
