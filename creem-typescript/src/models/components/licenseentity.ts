/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LicenseInstanceEntity,
  LicenseInstanceEntity$inboundSchema,
  LicenseInstanceEntity$Outbound,
  LicenseInstanceEntity$outboundSchema,
} from "./licenseinstanceentity.js";

/**
 * String representing the environment.
 */
export const LicenseEntityMode = {
  Test: "test",
  Live: "live",
  Sandbox: "sandbox",
} as const;
/**
 * String representing the environment.
 */
export type LicenseEntityMode = ClosedEnum<typeof LicenseEntityMode>;

/**
 * The current status of the license key.
 */
export const LicenseEntityStatus = {
  Inactive: "inactive",
  Active: "active",
  Expired: "expired",
  Disabled: "disabled",
} as const;
/**
 * The current status of the license key.
 */
export type LicenseEntityStatus = ClosedEnum<typeof LicenseEntityStatus>;

/**
 * The activation limit. Null if activations are unlimited.
 */
export type ActivationLimit = {};

/**
 * The date the license key expires. Null if it does not have an expiration date.
 */
export type ExpiresAt = {};

export type LicenseEntity = {
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the environment.
   */
  mode: LicenseEntityMode;
  /**
   * A string representing the objectâ€™s type. Objects of the same type share the same value.
   */
  object: string;
  /**
   * The current status of the license key.
   */
  status: LicenseEntityStatus;
  /**
   * The license key.
   */
  key: string;
  /**
   * The number of instances that this license key was activated.
   */
  activation: number;
  /**
   * The activation limit. Null if activations are unlimited.
   */
  activationLimit?: ActivationLimit | null | undefined;
  /**
   * The date the license key expires. Null if it does not have an expiration date.
   */
  expiresAt?: ExpiresAt | null | undefined;
  /**
   * The creation date of the license key.
   */
  createdAt: Date;
  /**
   * Associated license instances.
   */
  instance?: Array<LicenseInstanceEntity> | null | undefined;
};

/** @internal */
export const LicenseEntityMode$inboundSchema: z.ZodNativeEnum<
  typeof LicenseEntityMode
> = z.nativeEnum(LicenseEntityMode);

/** @internal */
export const LicenseEntityMode$outboundSchema: z.ZodNativeEnum<
  typeof LicenseEntityMode
> = LicenseEntityMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LicenseEntityMode$ {
  /** @deprecated use `LicenseEntityMode$inboundSchema` instead. */
  export const inboundSchema = LicenseEntityMode$inboundSchema;
  /** @deprecated use `LicenseEntityMode$outboundSchema` instead. */
  export const outboundSchema = LicenseEntityMode$outboundSchema;
}

/** @internal */
export const LicenseEntityStatus$inboundSchema: z.ZodNativeEnum<
  typeof LicenseEntityStatus
> = z.nativeEnum(LicenseEntityStatus);

/** @internal */
export const LicenseEntityStatus$outboundSchema: z.ZodNativeEnum<
  typeof LicenseEntityStatus
> = LicenseEntityStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LicenseEntityStatus$ {
  /** @deprecated use `LicenseEntityStatus$inboundSchema` instead. */
  export const inboundSchema = LicenseEntityStatus$inboundSchema;
  /** @deprecated use `LicenseEntityStatus$outboundSchema` instead. */
  export const outboundSchema = LicenseEntityStatus$outboundSchema;
}

/** @internal */
export const ActivationLimit$inboundSchema: z.ZodType<
  ActivationLimit,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ActivationLimit$Outbound = {};

/** @internal */
export const ActivationLimit$outboundSchema: z.ZodType<
  ActivationLimit$Outbound,
  z.ZodTypeDef,
  ActivationLimit
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivationLimit$ {
  /** @deprecated use `ActivationLimit$inboundSchema` instead. */
  export const inboundSchema = ActivationLimit$inboundSchema;
  /** @deprecated use `ActivationLimit$outboundSchema` instead. */
  export const outboundSchema = ActivationLimit$outboundSchema;
  /** @deprecated use `ActivationLimit$Outbound` instead. */
  export type Outbound = ActivationLimit$Outbound;
}

export function activationLimitToJSON(
  activationLimit: ActivationLimit,
): string {
  return JSON.stringify(ActivationLimit$outboundSchema.parse(activationLimit));
}

export function activationLimitFromJSON(
  jsonString: string,
): SafeParseResult<ActivationLimit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActivationLimit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActivationLimit' from JSON`,
  );
}

/** @internal */
export const ExpiresAt$inboundSchema: z.ZodType<
  ExpiresAt,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ExpiresAt$Outbound = {};

/** @internal */
export const ExpiresAt$outboundSchema: z.ZodType<
  ExpiresAt$Outbound,
  z.ZodTypeDef,
  ExpiresAt
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpiresAt$ {
  /** @deprecated use `ExpiresAt$inboundSchema` instead. */
  export const inboundSchema = ExpiresAt$inboundSchema;
  /** @deprecated use `ExpiresAt$outboundSchema` instead. */
  export const outboundSchema = ExpiresAt$outboundSchema;
  /** @deprecated use `ExpiresAt$Outbound` instead. */
  export type Outbound = ExpiresAt$Outbound;
}

export function expiresAtToJSON(expiresAt: ExpiresAt): string {
  return JSON.stringify(ExpiresAt$outboundSchema.parse(expiresAt));
}

export function expiresAtFromJSON(
  jsonString: string,
): SafeParseResult<ExpiresAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExpiresAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExpiresAt' from JSON`,
  );
}

/** @internal */
export const LicenseEntity$inboundSchema: z.ZodType<
  LicenseEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  mode: LicenseEntityMode$inboundSchema,
  object: z.string(),
  status: LicenseEntityStatus$inboundSchema,
  key: z.string(),
  activation: z.number(),
  activation_limit: z.nullable(z.lazy(() => ActivationLimit$inboundSchema))
    .optional(),
  expires_at: z.nullable(z.lazy(() => ExpiresAt$inboundSchema)).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  instance: z.nullable(z.array(LicenseInstanceEntity$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "activation_limit": "activationLimit",
    "expires_at": "expiresAt",
    "created_at": "createdAt",
  });
});

/** @internal */
export type LicenseEntity$Outbound = {
  id: string;
  mode: string;
  object: string;
  status: string;
  key: string;
  activation: number;
  activation_limit?: ActivationLimit$Outbound | null | undefined;
  expires_at?: ExpiresAt$Outbound | null | undefined;
  created_at: string;
  instance?: Array<LicenseInstanceEntity$Outbound> | null | undefined;
};

/** @internal */
export const LicenseEntity$outboundSchema: z.ZodType<
  LicenseEntity$Outbound,
  z.ZodTypeDef,
  LicenseEntity
> = z.object({
  id: z.string(),
  mode: LicenseEntityMode$outboundSchema,
  object: z.string(),
  status: LicenseEntityStatus$outboundSchema,
  key: z.string(),
  activation: z.number(),
  activationLimit: z.nullable(z.lazy(() => ActivationLimit$outboundSchema))
    .optional(),
  expiresAt: z.nullable(z.lazy(() => ExpiresAt$outboundSchema)).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  instance: z.nullable(z.array(LicenseInstanceEntity$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    activationLimit: "activation_limit",
    expiresAt: "expires_at",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LicenseEntity$ {
  /** @deprecated use `LicenseEntity$inboundSchema` instead. */
  export const inboundSchema = LicenseEntity$inboundSchema;
  /** @deprecated use `LicenseEntity$outboundSchema` instead. */
  export const outboundSchema = LicenseEntity$outboundSchema;
  /** @deprecated use `LicenseEntity$Outbound` instead. */
  export type Outbound = LicenseEntity$Outbound;
}

export function licenseEntityToJSON(licenseEntity: LicenseEntity): string {
  return JSON.stringify(LicenseEntity$outboundSchema.parse(licenseEntity));
}

export function licenseEntityFromJSON(
  jsonString: string,
): SafeParseResult<LicenseEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LicenseEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LicenseEntity' from JSON`,
  );
}
