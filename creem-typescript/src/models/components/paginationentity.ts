/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The next page number, or null if there is no next page
 */
export type NextPage = {};

/**
 * The previous page number, or null if there is no previous page
 */
export type PrevPage = {};

export type PaginationEntity = {
  /**
   * Total number of records in the list
   */
  totalRecords: number;
  /**
   * Total number of pages available
   */
  totalPages: number;
  /**
   * The current page number
   */
  currentPage: number;
  /**
   * The next page number, or null if there is no next page
   */
  nextPage?: NextPage | undefined;
  /**
   * The previous page number, or null if there is no previous page
   */
  prevPage?: PrevPage | undefined;
};

/** @internal */
export const NextPage$inboundSchema: z.ZodType<
  NextPage,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type NextPage$Outbound = {};

/** @internal */
export const NextPage$outboundSchema: z.ZodType<
  NextPage$Outbound,
  z.ZodTypeDef,
  NextPage
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NextPage$ {
  /** @deprecated use `NextPage$inboundSchema` instead. */
  export const inboundSchema = NextPage$inboundSchema;
  /** @deprecated use `NextPage$outboundSchema` instead. */
  export const outboundSchema = NextPage$outboundSchema;
  /** @deprecated use `NextPage$Outbound` instead. */
  export type Outbound = NextPage$Outbound;
}

export function nextPageToJSON(nextPage: NextPage): string {
  return JSON.stringify(NextPage$outboundSchema.parse(nextPage));
}

export function nextPageFromJSON(
  jsonString: string,
): SafeParseResult<NextPage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NextPage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NextPage' from JSON`,
  );
}

/** @internal */
export const PrevPage$inboundSchema: z.ZodType<
  PrevPage,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PrevPage$Outbound = {};

/** @internal */
export const PrevPage$outboundSchema: z.ZodType<
  PrevPage$Outbound,
  z.ZodTypeDef,
  PrevPage
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrevPage$ {
  /** @deprecated use `PrevPage$inboundSchema` instead. */
  export const inboundSchema = PrevPage$inboundSchema;
  /** @deprecated use `PrevPage$outboundSchema` instead. */
  export const outboundSchema = PrevPage$outboundSchema;
  /** @deprecated use `PrevPage$Outbound` instead. */
  export type Outbound = PrevPage$Outbound;
}

export function prevPageToJSON(prevPage: PrevPage): string {
  return JSON.stringify(PrevPage$outboundSchema.parse(prevPage));
}

export function prevPageFromJSON(
  jsonString: string,
): SafeParseResult<PrevPage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrevPage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrevPage' from JSON`,
  );
}

/** @internal */
export const PaginationEntity$inboundSchema: z.ZodType<
  PaginationEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_records: z.number(),
  total_pages: z.number(),
  current_page: z.number(),
  next_page: z.lazy(() => NextPage$inboundSchema).optional(),
  prev_page: z.lazy(() => PrevPage$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "total_records": "totalRecords",
    "total_pages": "totalPages",
    "current_page": "currentPage",
    "next_page": "nextPage",
    "prev_page": "prevPage",
  });
});

/** @internal */
export type PaginationEntity$Outbound = {
  total_records: number;
  total_pages: number;
  current_page: number;
  next_page?: NextPage$Outbound | undefined;
  prev_page?: PrevPage$Outbound | undefined;
};

/** @internal */
export const PaginationEntity$outboundSchema: z.ZodType<
  PaginationEntity$Outbound,
  z.ZodTypeDef,
  PaginationEntity
> = z.object({
  totalRecords: z.number(),
  totalPages: z.number(),
  currentPage: z.number(),
  nextPage: z.lazy(() => NextPage$outboundSchema).optional(),
  prevPage: z.lazy(() => PrevPage$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    totalRecords: "total_records",
    totalPages: "total_pages",
    currentPage: "current_page",
    nextPage: "next_page",
    prevPage: "prev_page",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationEntity$ {
  /** @deprecated use `PaginationEntity$inboundSchema` instead. */
  export const inboundSchema = PaginationEntity$inboundSchema;
  /** @deprecated use `PaginationEntity$outboundSchema` instead. */
  export const outboundSchema = PaginationEntity$outboundSchema;
  /** @deprecated use `PaginationEntity$Outbound` instead. */
  export type Outbound = PaginationEntity$Outbound;
}

export function paginationEntityToJSON(
  paginationEntity: PaginationEntity,
): string {
  return JSON.stringify(
    PaginationEntity$outboundSchema.parse(paginationEntity),
  );
}

export function paginationEntityFromJSON(
  jsonString: string,
): SafeParseResult<PaginationEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginationEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginationEntity' from JSON`,
  );
}
