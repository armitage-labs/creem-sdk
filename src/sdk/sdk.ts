/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { activateLicense } from "../funcs/activateLicense.js";
import { cancelSubscription } from "../funcs/cancelSubscription.js";
import { createCheckout } from "../funcs/createCheckout.js";
import { createDiscount } from "../funcs/createDiscount.js";
import { createProduct } from "../funcs/createProduct.js";
import { customerPortalGenerateLogin } from "../funcs/customerPortalGenerateLogin.js";
import { deactivateLicense } from "../funcs/deactivateLicense.js";
import { deleteDiscount } from "../funcs/deleteDiscount.js";
import { getCheckout } from "../funcs/getCheckout.js";
import { getCustomer } from "../funcs/getCustomer.js";
import { getDiscount } from "../funcs/getDiscount.js";
import { getProduct } from "../funcs/getProduct.js";
import { getSubscription } from "../funcs/getSubscription.js";
import { listProducts } from "../funcs/listProducts.js";
import { listTransactions } from "../funcs/listTransactions.js";
import { updateSubscription } from "../funcs/updateSubscription.js";
import { validateLicense } from "../funcs/validateLicense.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Creem extends ClientSDK {
  /**
   * Retrieve a product
   */
  async getProduct(
    request: operations.GetProductRequest,
    options?: RequestOptions,
  ): Promise<components.ProductEntity> {
    return unwrapAsync(getProduct(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a new product.
   */
  async createProduct(
    request: operations.CreateProductRequest,
    options?: RequestOptions,
  ): Promise<components.ProductEntity> {
    return unwrapAsync(createProduct(
      this,
      request,
      options,
    ));
  }

  /**
   * List all products
   */
  async listProducts(
    request: operations.ListProductsRequest,
    options?: RequestOptions,
  ): Promise<components.ProductListEntity> {
    return unwrapAsync(listProducts(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a customer
   */
  async getCustomer(
    request: operations.GetCustomerRequest,
    options?: RequestOptions,
  ): Promise<components.CustomerEntity> {
    return unwrapAsync(getCustomer(
      this,
      request,
      options,
    ));
  }

  /**
   * Generate Customer Links
   */
  async customerPortalGenerateLogin(
    request: operations.CustomerPortalGenerateLoginRequest,
    options?: RequestOptions,
  ): Promise<components.CustomerLinksEntity> {
    return unwrapAsync(customerPortalGenerateLogin(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a subscription
   */
  async getSubscription(
    request: operations.GetSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<components.SubscriptionEntity> {
    return unwrapAsync(getSubscription(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel a subscription.
   */
  async cancelSubscription(
    request: operations.CancelSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<components.SubscriptionEntity> {
    return unwrapAsync(cancelSubscription(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a subscription.
   */
  async updateSubscription(
    request: operations.UpdateSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<components.SubscriptionEntity> {
    return unwrapAsync(updateSubscription(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a new checkout session.
   */
  async getCheckout(
    request: operations.GetCheckoutRequest,
    options?: RequestOptions,
  ): Promise<components.CheckoutEntity> {
    return unwrapAsync(getCheckout(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a new checkout session.
   */
  async createCheckout(
    request: operations.CreateCheckoutRequest,
    options?: RequestOptions,
  ): Promise<components.CheckoutEntity> {
    return unwrapAsync(createCheckout(
      this,
      request,
      options,
    ));
  }

  /**
   * Activates a license key.
   */
  async activateLicense(
    request: operations.ActivateLicenseRequest,
    options?: RequestOptions,
  ): Promise<components.LicenseEntity> {
    return unwrapAsync(activateLicense(
      this,
      request,
      options,
    ));
  }

  /**
   * Deactivate a license key instance.
   */
  async deactivateLicense(
    request: operations.DeactivateLicenseRequest,
    options?: RequestOptions,
  ): Promise<components.LicenseEntity> {
    return unwrapAsync(deactivateLicense(
      this,
      request,
      options,
    ));
  }

  /**
   * Validates a license key or instance.
   */
  async validateLicense(
    request: operations.ValidateLicenseRequest,
    options?: RequestOptions,
  ): Promise<components.LicenseEntity> {
    return unwrapAsync(validateLicense(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve discount
   */
  async getDiscount(
    request: operations.GetDiscountRequest,
    options?: RequestOptions,
  ): Promise<components.DiscountEntity> {
    return unwrapAsync(getDiscount(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a discount.
   */
  async createDiscount(
    request: operations.CreateDiscountRequest,
    options?: RequestOptions,
  ): Promise<components.DiscountEntity> {
    return unwrapAsync(createDiscount(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a discount.
   */
  async deleteDiscount(
    request: operations.DeleteDiscountRequest,
    options?: RequestOptions,
  ): Promise<components.DiscountEntity> {
    return unwrapAsync(deleteDiscount(
      this,
      request,
      options,
    ));
  }

  /**
   * List all transactions
   */
  async listTransactions(
    request: operations.ListTransactionsRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionListEntity> {
    return unwrapAsync(listTransactions(
      this,
      request,
      options,
    ));
  }
}
