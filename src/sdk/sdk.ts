/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { checkoutsControllerV1Retrieve } from "../funcs/checkoutsControllerV1Retrieve.js";
import { createCheckout } from "../funcs/createCheckout.js";
import { customersBillingControllerV1Generate } from "../funcs/customersBillingControllerV1Generate.js";
import { customersControllerV1Retrieve } from "../funcs/customersControllerV1Retrieve.js";
import { discountsControllerV1Create } from "../funcs/discountsControllerV1Create.js";
import { discountsControllerV1Delete } from "../funcs/discountsControllerV1Delete.js";
import { discountsControllerV1Retrieve } from "../funcs/discountsControllerV1Retrieve.js";
import { licensesControllerV1Activate } from "../funcs/licensesControllerV1Activate.js";
import { licensesControllerV1Deactivate } from "../funcs/licensesControllerV1Deactivate.js";
import { licensesControllerV1Validate } from "../funcs/licensesControllerV1Validate.js";
import { productsControllerV1Create } from "../funcs/productsControllerV1Create.js";
import { productsControllerV1Retrieve } from "../funcs/productsControllerV1Retrieve.js";
import { productsControllerV1Search } from "../funcs/productsControllerV1Search.js";
import { subscriptionsControllerV1Cancel } from "../funcs/subscriptionsControllerV1Cancel.js";
import { subscriptionsControllerV1Retrieve } from "../funcs/subscriptionsControllerV1Retrieve.js";
import { subscriptionsControllerV1Update } from "../funcs/subscriptionsControllerV1Update.js";
import { subscriptionsControllerV1Upgrade } from "../funcs/subscriptionsControllerV1Upgrade.js";
import { transactionsControllerV1Search } from "../funcs/transactionsControllerV1Search.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Creem extends ClientSDK {
  /**
   * Retrieve a product
   */
  async productsControllerV1Retrieve(
    request: operations.ProductsControllerV1RetrieveRequest,
    options?: RequestOptions,
  ): Promise<components.ProductEntity> {
    return unwrapAsync(productsControllerV1Retrieve(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a new product.
   */
  async productsControllerV1Create(
    request: operations.ProductsControllerV1CreateRequest,
    options?: RequestOptions,
  ): Promise<components.ProductEntity> {
    return unwrapAsync(productsControllerV1Create(
      this,
      request,
      options,
    ));
  }

  /**
   * List all products
   */
  async productsControllerV1Search(
    request: operations.ProductsControllerV1SearchRequest,
    options?: RequestOptions,
  ): Promise<components.ProductListEntity> {
    return unwrapAsync(productsControllerV1Search(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a customer
   */
  async customersControllerV1Retrieve(
    request: operations.CustomersControllerV1RetrieveRequest,
    options?: RequestOptions,
  ): Promise<components.CustomerEntity> {
    return unwrapAsync(customersControllerV1Retrieve(
      this,
      request,
      options,
    ));
  }

  /**
   * Generate Customer Links
   */
  async customersBillingControllerV1Generate(
    request: operations.CustomersBillingControllerV1GenerateRequest,
    options?: RequestOptions,
  ): Promise<components.CustomerLinksEntity> {
    return unwrapAsync(customersBillingControllerV1Generate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a subscription
   */
  async subscriptionsControllerV1Retrieve(
    request: operations.SubscriptionsControllerV1RetrieveRequest,
    options?: RequestOptions,
  ): Promise<components.SubscriptionEntity> {
    return unwrapAsync(subscriptionsControllerV1Retrieve(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel a subscription.
   */
  async subscriptionsControllerV1Cancel(
    request: operations.SubscriptionsControllerV1CancelRequest,
    options?: RequestOptions,
  ): Promise<components.SubscriptionEntity> {
    return unwrapAsync(subscriptionsControllerV1Cancel(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a subscription.
   */
  async subscriptionsControllerV1Update(
    request: operations.SubscriptionsControllerV1UpdateRequest,
    options?: RequestOptions,
  ): Promise<components.SubscriptionEntity> {
    return unwrapAsync(subscriptionsControllerV1Update(
      this,
      request,
      options,
    ));
  }

  /**
   * Upgrade a subscription to a different product
   */
  async subscriptionsControllerV1Upgrade(
    request: operations.SubscriptionsControllerV1UpgradeRequest,
    options?: RequestOptions,
  ): Promise<components.SubscriptionEntity> {
    return unwrapAsync(subscriptionsControllerV1Upgrade(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a new checkout session.
   */
  async checkoutsControllerV1Retrieve(
    request: operations.CheckoutsControllerV1RetrieveRequest,
    options?: RequestOptions,
  ): Promise<components.CheckoutEntity> {
    return unwrapAsync(checkoutsControllerV1Retrieve(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a new checkout session.
   */
  async createCheckout(
    request: operations.CreateCheckoutRequest,
    options?: RequestOptions,
  ): Promise<components.CheckoutEntity> {
    return unwrapAsync(createCheckout(
      this,
      request,
      options,
    ));
  }

  /**
   * Activates a license key.
   */
  async licensesControllerV1Activate(
    request: operations.LicensesControllerV1ActivateRequest,
    options?: RequestOptions,
  ): Promise<components.LicenseEntity> {
    return unwrapAsync(licensesControllerV1Activate(
      this,
      request,
      options,
    ));
  }

  /**
   * Deactivate a license key instance.
   */
  async licensesControllerV1Deactivate(
    request: operations.LicensesControllerV1DeactivateRequest,
    options?: RequestOptions,
  ): Promise<components.LicenseEntity> {
    return unwrapAsync(licensesControllerV1Deactivate(
      this,
      request,
      options,
    ));
  }

  /**
   * Validates a license key or instance.
   */
  async licensesControllerV1Validate(
    request: operations.LicensesControllerV1ValidateRequest,
    options?: RequestOptions,
  ): Promise<components.LicenseEntity> {
    return unwrapAsync(licensesControllerV1Validate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve discount
   */
  async discountsControllerV1Retrieve(
    request: operations.DiscountsControllerV1RetrieveRequest,
    options?: RequestOptions,
  ): Promise<components.DiscountEntity> {
    return unwrapAsync(discountsControllerV1Retrieve(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a discount.
   */
  async discountsControllerV1Create(
    request: operations.DiscountsControllerV1CreateRequest,
    options?: RequestOptions,
  ): Promise<components.DiscountEntity> {
    return unwrapAsync(discountsControllerV1Create(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a discount.
   */
  async discountsControllerV1Delete(
    request: operations.DiscountsControllerV1DeleteRequest,
    options?: RequestOptions,
  ): Promise<components.DiscountEntity> {
    return unwrapAsync(discountsControllerV1Delete(
      this,
      request,
      options,
    ));
  }

  /**
   * List all transactions
   */
  async transactionsControllerV1Search(
    request: operations.TransactionsControllerV1SearchRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionListEntity> {
    return unwrapAsync(transactionsControllerV1Search(
      this,
      request,
      options,
    ));
  }
}
