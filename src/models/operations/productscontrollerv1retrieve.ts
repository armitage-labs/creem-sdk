/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ProductsControllerV1RetrieveRequest = {
  /**
   * The unique identifier of the product
   */
  productId: string;
  xApiKey: string;
};

/** @internal */
export const ProductsControllerV1RetrieveRequest$inboundSchema: z.ZodType<
  ProductsControllerV1RetrieveRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_id: z.string(),
  "x-api-key": z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "x-api-key": "xApiKey",
  });
});

/** @internal */
export type ProductsControllerV1RetrieveRequest$Outbound = {
  product_id: string;
  "x-api-key": string;
};

/** @internal */
export const ProductsControllerV1RetrieveRequest$outboundSchema: z.ZodType<
  ProductsControllerV1RetrieveRequest$Outbound,
  z.ZodTypeDef,
  ProductsControllerV1RetrieveRequest
> = z.object({
  productId: z.string(),
  xApiKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    xApiKey: "x-api-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductsControllerV1RetrieveRequest$ {
  /** @deprecated use `ProductsControllerV1RetrieveRequest$inboundSchema` instead. */
  export const inboundSchema =
    ProductsControllerV1RetrieveRequest$inboundSchema;
  /** @deprecated use `ProductsControllerV1RetrieveRequest$outboundSchema` instead. */
  export const outboundSchema =
    ProductsControllerV1RetrieveRequest$outboundSchema;
  /** @deprecated use `ProductsControllerV1RetrieveRequest$Outbound` instead. */
  export type Outbound = ProductsControllerV1RetrieveRequest$Outbound;
}

export function productsControllerV1RetrieveRequestToJSON(
  productsControllerV1RetrieveRequest: ProductsControllerV1RetrieveRequest,
): string {
  return JSON.stringify(
    ProductsControllerV1RetrieveRequest$outboundSchema.parse(
      productsControllerV1RetrieveRequest,
    ),
  );
}

export function productsControllerV1RetrieveRequestFromJSON(
  jsonString: string,
): SafeParseResult<ProductsControllerV1RetrieveRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ProductsControllerV1RetrieveRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductsControllerV1RetrieveRequest' from JSON`,
  );
}
