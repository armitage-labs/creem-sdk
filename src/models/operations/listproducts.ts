/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListProductsRequest = {
  /**
   * The page number
   */
  pageNumber?: number | undefined;
  /**
   * The the page size
   */
  pageSize?: number | undefined;
  xApiKey: string;
};

/** @internal */
export const ListProductsRequest$inboundSchema: z.ZodType<
  ListProductsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page_number: z.number().optional(),
  page_size: z.number().optional(),
  "x-api-key": z.string(),
}).transform((v) => {
  return remap$(v, {
    "page_number": "pageNumber",
    "page_size": "pageSize",
    "x-api-key": "xApiKey",
  });
});

/** @internal */
export type ListProductsRequest$Outbound = {
  page_number?: number | undefined;
  page_size?: number | undefined;
  "x-api-key": string;
};

/** @internal */
export const ListProductsRequest$outboundSchema: z.ZodType<
  ListProductsRequest$Outbound,
  z.ZodTypeDef,
  ListProductsRequest
> = z.object({
  pageNumber: z.number().optional(),
  pageSize: z.number().optional(),
  xApiKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    pageNumber: "page_number",
    pageSize: "page_size",
    xApiKey: "x-api-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListProductsRequest$ {
  /** @deprecated use `ListProductsRequest$inboundSchema` instead. */
  export const inboundSchema = ListProductsRequest$inboundSchema;
  /** @deprecated use `ListProductsRequest$outboundSchema` instead. */
  export const outboundSchema = ListProductsRequest$outboundSchema;
  /** @deprecated use `ListProductsRequest$Outbound` instead. */
  export type Outbound = ListProductsRequest$Outbound;
}

export function listProductsRequestToJSON(
  listProductsRequest: ListProductsRequest,
): string {
  return JSON.stringify(
    ListProductsRequest$outboundSchema.parse(listProductsRequest),
  );
}

export function listProductsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListProductsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListProductsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListProductsRequest' from JSON`,
  );
}
