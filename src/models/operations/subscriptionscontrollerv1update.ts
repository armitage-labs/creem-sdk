/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscriptionsControllerV1UpdateRequest = {
  id: string;
  xApiKey: string;
  updateSubscriptionRequestEntity: components.UpdateSubscriptionRequestEntity;
};

/** @internal */
export const SubscriptionsControllerV1UpdateRequest$inboundSchema: z.ZodType<
  SubscriptionsControllerV1UpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "x-api-key": z.string(),
  UpdateSubscriptionRequestEntity:
    components.UpdateSubscriptionRequestEntity$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-api-key": "xApiKey",
    "UpdateSubscriptionRequestEntity": "updateSubscriptionRequestEntity",
  });
});

/** @internal */
export type SubscriptionsControllerV1UpdateRequest$Outbound = {
  id: string;
  "x-api-key": string;
  UpdateSubscriptionRequestEntity:
    components.UpdateSubscriptionRequestEntity$Outbound;
};

/** @internal */
export const SubscriptionsControllerV1UpdateRequest$outboundSchema: z.ZodType<
  SubscriptionsControllerV1UpdateRequest$Outbound,
  z.ZodTypeDef,
  SubscriptionsControllerV1UpdateRequest
> = z.object({
  id: z.string(),
  xApiKey: z.string(),
  updateSubscriptionRequestEntity:
    components.UpdateSubscriptionRequestEntity$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xApiKey: "x-api-key",
    updateSubscriptionRequestEntity: "UpdateSubscriptionRequestEntity",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionsControllerV1UpdateRequest$ {
  /** @deprecated use `SubscriptionsControllerV1UpdateRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionsControllerV1UpdateRequest$inboundSchema;
  /** @deprecated use `SubscriptionsControllerV1UpdateRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionsControllerV1UpdateRequest$outboundSchema;
  /** @deprecated use `SubscriptionsControllerV1UpdateRequest$Outbound` instead. */
  export type Outbound = SubscriptionsControllerV1UpdateRequest$Outbound;
}

export function subscriptionsControllerV1UpdateRequestToJSON(
  subscriptionsControllerV1UpdateRequest:
    SubscriptionsControllerV1UpdateRequest,
): string {
  return JSON.stringify(
    SubscriptionsControllerV1UpdateRequest$outboundSchema.parse(
      subscriptionsControllerV1UpdateRequest,
    ),
  );
}

export function subscriptionsControllerV1UpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionsControllerV1UpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionsControllerV1UpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionsControllerV1UpdateRequest' from JSON`,
  );
}
