/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscriptionsControllerV1UpgradeRequest = {
  id: string;
  xApiKey: string;
  upgradeSubscriptionRequestEntity: components.UpgradeSubscriptionRequestEntity;
};

/** @internal */
export const SubscriptionsControllerV1UpgradeRequest$inboundSchema: z.ZodType<
  SubscriptionsControllerV1UpgradeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  "x-api-key": z.string(),
  UpgradeSubscriptionRequestEntity:
    components.UpgradeSubscriptionRequestEntity$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "x-api-key": "xApiKey",
    "UpgradeSubscriptionRequestEntity": "upgradeSubscriptionRequestEntity",
  });
});

/** @internal */
export type SubscriptionsControllerV1UpgradeRequest$Outbound = {
  id: string;
  "x-api-key": string;
  UpgradeSubscriptionRequestEntity:
    components.UpgradeSubscriptionRequestEntity$Outbound;
};

/** @internal */
export const SubscriptionsControllerV1UpgradeRequest$outboundSchema: z.ZodType<
  SubscriptionsControllerV1UpgradeRequest$Outbound,
  z.ZodTypeDef,
  SubscriptionsControllerV1UpgradeRequest
> = z.object({
  id: z.string(),
  xApiKey: z.string(),
  upgradeSubscriptionRequestEntity:
    components.UpgradeSubscriptionRequestEntity$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xApiKey: "x-api-key",
    upgradeSubscriptionRequestEntity: "UpgradeSubscriptionRequestEntity",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionsControllerV1UpgradeRequest$ {
  /** @deprecated use `SubscriptionsControllerV1UpgradeRequest$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionsControllerV1UpgradeRequest$inboundSchema;
  /** @deprecated use `SubscriptionsControllerV1UpgradeRequest$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionsControllerV1UpgradeRequest$outboundSchema;
  /** @deprecated use `SubscriptionsControllerV1UpgradeRequest$Outbound` instead. */
  export type Outbound = SubscriptionsControllerV1UpgradeRequest$Outbound;
}

export function subscriptionsControllerV1UpgradeRequestToJSON(
  subscriptionsControllerV1UpgradeRequest:
    SubscriptionsControllerV1UpgradeRequest,
): string {
  return JSON.stringify(
    SubscriptionsControllerV1UpgradeRequest$outboundSchema.parse(
      subscriptionsControllerV1UpgradeRequest,
    ),
  );
}

export function subscriptionsControllerV1UpgradeRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionsControllerV1UpgradeRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionsControllerV1UpgradeRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionsControllerV1UpgradeRequest' from JSON`,
  );
}
