/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UpsertSubscriptionItemEntity,
  UpsertSubscriptionItemEntity$inboundSchema,
  UpsertSubscriptionItemEntity$Outbound,
  UpsertSubscriptionItemEntity$outboundSchema,
} from "./upsertsubscriptionitementity.js";

export type UpdateSubscriptionRequestEntity = {
  /**
   * List of subscription items to update/create. If no item ID is provided, the item will be created.
   */
  items?: Array<UpsertSubscriptionItemEntity> | undefined;
};

/** @internal */
export const UpdateSubscriptionRequestEntity$inboundSchema: z.ZodType<
  UpdateSubscriptionRequestEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(UpsertSubscriptionItemEntity$inboundSchema).optional(),
});

/** @internal */
export type UpdateSubscriptionRequestEntity$Outbound = {
  items?: Array<UpsertSubscriptionItemEntity$Outbound> | undefined;
};

/** @internal */
export const UpdateSubscriptionRequestEntity$outboundSchema: z.ZodType<
  UpdateSubscriptionRequestEntity$Outbound,
  z.ZodTypeDef,
  UpdateSubscriptionRequestEntity
> = z.object({
  items: z.array(UpsertSubscriptionItemEntity$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSubscriptionRequestEntity$ {
  /** @deprecated use `UpdateSubscriptionRequestEntity$inboundSchema` instead. */
  export const inboundSchema = UpdateSubscriptionRequestEntity$inboundSchema;
  /** @deprecated use `UpdateSubscriptionRequestEntity$outboundSchema` instead. */
  export const outboundSchema = UpdateSubscriptionRequestEntity$outboundSchema;
  /** @deprecated use `UpdateSubscriptionRequestEntity$Outbound` instead. */
  export type Outbound = UpdateSubscriptionRequestEntity$Outbound;
}

export function updateSubscriptionRequestEntityToJSON(
  updateSubscriptionRequestEntity: UpdateSubscriptionRequestEntity,
): string {
  return JSON.stringify(
    UpdateSubscriptionRequestEntity$outboundSchema.parse(
      updateSubscriptionRequestEntity,
    ),
  );
}

export function updateSubscriptionRequestEntityFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSubscriptionRequestEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSubscriptionRequestEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSubscriptionRequestEntity' from JSON`,
  );
}
