/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CustomerRequestEntity,
  CustomerRequestEntity$inboundSchema,
  CustomerRequestEntity$Outbound,
  CustomerRequestEntity$outboundSchema,
} from "./customerrequestentity.js";
import {
  CustomFieldRequestEntity,
  CustomFieldRequestEntity$inboundSchema,
  CustomFieldRequestEntity$Outbound,
  CustomFieldRequestEntity$outboundSchema,
} from "./customfieldrequestentity.js";

export type CreateCheckoutRequestEntity = {
  /**
   * Identify and track each checkout request.
   */
  requestId?: string | undefined;
  /**
   * The ID of the product associated with the checkout session.
   */
  productId: string;
  /**
   * The number of units for the order.
   */
  units?: number | undefined;
  /**
   * Prefill the checkout session with a discount code.
   */
  discountCode?: string | undefined;
  /**
   * Customer data for checkout session. This will prefill the customer info on the checkout page
   */
  customer?: CustomerRequestEntity | undefined;
  /**
   * Collect additional information from your customer using custom fields. Up to 3 fields are supported.
   */
  customField?: Array<CustomFieldRequestEntity> | undefined;
  /**
   * The URL to which the user will be redirected after the checkout process is completed.
   */
  successUrl?: string | undefined;
  /**
   * Metadata for the checkout in the form of key-value pairs
   */
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const CreateCheckoutRequestEntity$inboundSchema: z.ZodType<
  CreateCheckoutRequestEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  request_id: z.string().optional(),
  product_id: z.string(),
  units: z.number().optional(),
  discount_code: z.string().optional(),
  customer: CustomerRequestEntity$inboundSchema.optional(),
  custom_field: z.array(CustomFieldRequestEntity$inboundSchema).optional(),
  success_url: z.string().optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
    "product_id": "productId",
    "discount_code": "discountCode",
    "custom_field": "customField",
    "success_url": "successUrl",
  });
});

/** @internal */
export type CreateCheckoutRequestEntity$Outbound = {
  request_id?: string | undefined;
  product_id: string;
  units?: number | undefined;
  discount_code?: string | undefined;
  customer?: CustomerRequestEntity$Outbound | undefined;
  custom_field?: Array<CustomFieldRequestEntity$Outbound> | undefined;
  success_url?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
};

/** @internal */
export const CreateCheckoutRequestEntity$outboundSchema: z.ZodType<
  CreateCheckoutRequestEntity$Outbound,
  z.ZodTypeDef,
  CreateCheckoutRequestEntity
> = z.object({
  requestId: z.string().optional(),
  productId: z.string(),
  units: z.number().optional(),
  discountCode: z.string().optional(),
  customer: CustomerRequestEntity$outboundSchema.optional(),
  customField: z.array(CustomFieldRequestEntity$outboundSchema).optional(),
  successUrl: z.string().optional(),
  metadata: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
    productId: "product_id",
    discountCode: "discount_code",
    customField: "custom_field",
    successUrl: "success_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCheckoutRequestEntity$ {
  /** @deprecated use `CreateCheckoutRequestEntity$inboundSchema` instead. */
  export const inboundSchema = CreateCheckoutRequestEntity$inboundSchema;
  /** @deprecated use `CreateCheckoutRequestEntity$outboundSchema` instead. */
  export const outboundSchema = CreateCheckoutRequestEntity$outboundSchema;
  /** @deprecated use `CreateCheckoutRequestEntity$Outbound` instead. */
  export type Outbound = CreateCheckoutRequestEntity$Outbound;
}

export function createCheckoutRequestEntityToJSON(
  createCheckoutRequestEntity: CreateCheckoutRequestEntity,
): string {
  return JSON.stringify(
    CreateCheckoutRequestEntity$outboundSchema.parse(
      createCheckoutRequestEntity,
    ),
  );
}

export function createCheckoutRequestEntityFromJSON(
  jsonString: string,
): SafeParseResult<CreateCheckoutRequestEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCheckoutRequestEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCheckoutRequestEntity' from JSON`,
  );
}
