/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * String representing the environment.
 */
export const TransactionEntityMode = {
  Test: "test",
  Live: "live",
  Sandbox: "sandbox",
} as const;
/**
 * String representing the environment.
 */
export type TransactionEntityMode = ClosedEnum<typeof TransactionEntityMode>;

/**
 * The order associated with the transaction.
 */
export type Order = {};

/**
 * The subscription associated with the transaction.
 */
export type TransactionEntitySubscription = {};

/**
 * The customer associated with the transaction.
 */
export type TransactionEntityCustomer = {};

export type TransactionEntity = {
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the environment.
   */
  mode: TransactionEntityMode;
  /**
   * String representing the objectâ€™s type. Objects of the same type share the same value.
   */
  object: string;
  /**
   * The transaction amount in cents. 1000 = $10.00
   */
  amount: number;
  /**
   * The amount the customer paid in cents. 1000 = $10.00
   */
  amountPaid: number;
  /**
   * Three-letter ISO currency code, in uppercase. Must be a supported currency.
   */
  currency: string;
  /**
   * The type of transaction. payment(one time payments) and invoice(subscription)
   */
  type: string;
  /**
   * The ISO alpha-2 country code where tax is collected.
   */
  taxCountry: string;
  /**
   * The sale tax amount in cents. 1000 = $10.00
   */
  taxAmount: number;
  /**
   * Status of the transaction.
   */
  status: string;
  /**
   * The amount that has been refunded in cents. 1000 = $10.00
   */
  refundedAmount: number;
  /**
   * The order associated with the transaction.
   */
  order?: Order | undefined;
  /**
   * The subscription associated with the transaction.
   */
  subscription?: TransactionEntitySubscription | undefined;
  /**
   * The customer associated with the transaction.
   */
  customer?: TransactionEntityCustomer | undefined;
  /**
   * The description of the transaction.
   */
  description?: string | undefined;
  /**
   * Start period for the invoice as timestamp
   */
  periodStart?: number | undefined;
  /**
   * End period for the invoice as timestamp
   */
  periodEnd?: number | undefined;
  /**
   * Creation date of the order as timestamp
   */
  createdAt: number;
};

/** @internal */
export const TransactionEntityMode$inboundSchema: z.ZodNativeEnum<
  typeof TransactionEntityMode
> = z.nativeEnum(TransactionEntityMode);

/** @internal */
export const TransactionEntityMode$outboundSchema: z.ZodNativeEnum<
  typeof TransactionEntityMode
> = TransactionEntityMode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionEntityMode$ {
  /** @deprecated use `TransactionEntityMode$inboundSchema` instead. */
  export const inboundSchema = TransactionEntityMode$inboundSchema;
  /** @deprecated use `TransactionEntityMode$outboundSchema` instead. */
  export const outboundSchema = TransactionEntityMode$outboundSchema;
}

/** @internal */
export const Order$inboundSchema: z.ZodType<Order, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Order$Outbound = {};

/** @internal */
export const Order$outboundSchema: z.ZodType<
  Order$Outbound,
  z.ZodTypeDef,
  Order
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Order$ {
  /** @deprecated use `Order$inboundSchema` instead. */
  export const inboundSchema = Order$inboundSchema;
  /** @deprecated use `Order$outboundSchema` instead. */
  export const outboundSchema = Order$outboundSchema;
  /** @deprecated use `Order$Outbound` instead. */
  export type Outbound = Order$Outbound;
}

export function orderToJSON(order: Order): string {
  return JSON.stringify(Order$outboundSchema.parse(order));
}

export function orderFromJSON(
  jsonString: string,
): SafeParseResult<Order, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Order$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Order' from JSON`,
  );
}

/** @internal */
export const TransactionEntitySubscription$inboundSchema: z.ZodType<
  TransactionEntitySubscription,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TransactionEntitySubscription$Outbound = {};

/** @internal */
export const TransactionEntitySubscription$outboundSchema: z.ZodType<
  TransactionEntitySubscription$Outbound,
  z.ZodTypeDef,
  TransactionEntitySubscription
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionEntitySubscription$ {
  /** @deprecated use `TransactionEntitySubscription$inboundSchema` instead. */
  export const inboundSchema = TransactionEntitySubscription$inboundSchema;
  /** @deprecated use `TransactionEntitySubscription$outboundSchema` instead. */
  export const outboundSchema = TransactionEntitySubscription$outboundSchema;
  /** @deprecated use `TransactionEntitySubscription$Outbound` instead. */
  export type Outbound = TransactionEntitySubscription$Outbound;
}

export function transactionEntitySubscriptionToJSON(
  transactionEntitySubscription: TransactionEntitySubscription,
): string {
  return JSON.stringify(
    TransactionEntitySubscription$outboundSchema.parse(
      transactionEntitySubscription,
    ),
  );
}

export function transactionEntitySubscriptionFromJSON(
  jsonString: string,
): SafeParseResult<TransactionEntitySubscription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionEntitySubscription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionEntitySubscription' from JSON`,
  );
}

/** @internal */
export const TransactionEntityCustomer$inboundSchema: z.ZodType<
  TransactionEntityCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TransactionEntityCustomer$Outbound = {};

/** @internal */
export const TransactionEntityCustomer$outboundSchema: z.ZodType<
  TransactionEntityCustomer$Outbound,
  z.ZodTypeDef,
  TransactionEntityCustomer
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionEntityCustomer$ {
  /** @deprecated use `TransactionEntityCustomer$inboundSchema` instead. */
  export const inboundSchema = TransactionEntityCustomer$inboundSchema;
  /** @deprecated use `TransactionEntityCustomer$outboundSchema` instead. */
  export const outboundSchema = TransactionEntityCustomer$outboundSchema;
  /** @deprecated use `TransactionEntityCustomer$Outbound` instead. */
  export type Outbound = TransactionEntityCustomer$Outbound;
}

export function transactionEntityCustomerToJSON(
  transactionEntityCustomer: TransactionEntityCustomer,
): string {
  return JSON.stringify(
    TransactionEntityCustomer$outboundSchema.parse(transactionEntityCustomer),
  );
}

export function transactionEntityCustomerFromJSON(
  jsonString: string,
): SafeParseResult<TransactionEntityCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionEntityCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionEntityCustomer' from JSON`,
  );
}

/** @internal */
export const TransactionEntity$inboundSchema: z.ZodType<
  TransactionEntity,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  mode: TransactionEntityMode$inboundSchema,
  object: z.string(),
  amount: z.number(),
  amount_paid: z.number(),
  currency: z.string(),
  type: z.string(),
  tax_country: z.string(),
  tax_amount: z.number(),
  status: z.string(),
  refunded_amount: z.number(),
  order: z.lazy(() => Order$inboundSchema).optional(),
  subscription: z.lazy(() => TransactionEntitySubscription$inboundSchema)
    .optional(),
  customer: z.lazy(() => TransactionEntityCustomer$inboundSchema).optional(),
  description: z.string().optional(),
  period_start: z.number().optional(),
  period_end: z.number().optional(),
  created_at: z.number(),
}).transform((v) => {
  return remap$(v, {
    "amount_paid": "amountPaid",
    "tax_country": "taxCountry",
    "tax_amount": "taxAmount",
    "refunded_amount": "refundedAmount",
    "period_start": "periodStart",
    "period_end": "periodEnd",
    "created_at": "createdAt",
  });
});

/** @internal */
export type TransactionEntity$Outbound = {
  id: string;
  mode: string;
  object: string;
  amount: number;
  amount_paid: number;
  currency: string;
  type: string;
  tax_country: string;
  tax_amount: number;
  status: string;
  refunded_amount: number;
  order?: Order$Outbound | undefined;
  subscription?: TransactionEntitySubscription$Outbound | undefined;
  customer?: TransactionEntityCustomer$Outbound | undefined;
  description?: string | undefined;
  period_start?: number | undefined;
  period_end?: number | undefined;
  created_at: number;
};

/** @internal */
export const TransactionEntity$outboundSchema: z.ZodType<
  TransactionEntity$Outbound,
  z.ZodTypeDef,
  TransactionEntity
> = z.object({
  id: z.string(),
  mode: TransactionEntityMode$outboundSchema,
  object: z.string(),
  amount: z.number(),
  amountPaid: z.number(),
  currency: z.string(),
  type: z.string(),
  taxCountry: z.string(),
  taxAmount: z.number(),
  status: z.string(),
  refundedAmount: z.number(),
  order: z.lazy(() => Order$outboundSchema).optional(),
  subscription: z.lazy(() => TransactionEntitySubscription$outboundSchema)
    .optional(),
  customer: z.lazy(() => TransactionEntityCustomer$outboundSchema).optional(),
  description: z.string().optional(),
  periodStart: z.number().optional(),
  periodEnd: z.number().optional(),
  createdAt: z.number(),
}).transform((v) => {
  return remap$(v, {
    amountPaid: "amount_paid",
    taxCountry: "tax_country",
    taxAmount: "tax_amount",
    refundedAmount: "refunded_amount",
    periodStart: "period_start",
    periodEnd: "period_end",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionEntity$ {
  /** @deprecated use `TransactionEntity$inboundSchema` instead. */
  export const inboundSchema = TransactionEntity$inboundSchema;
  /** @deprecated use `TransactionEntity$outboundSchema` instead. */
  export const outboundSchema = TransactionEntity$outboundSchema;
  /** @deprecated use `TransactionEntity$Outbound` instead. */
  export type Outbound = TransactionEntity$Outbound;
}

export function transactionEntityToJSON(
  transactionEntity: TransactionEntity,
): string {
  return JSON.stringify(
    TransactionEntity$outboundSchema.parse(transactionEntity),
  );
}

export function transactionEntityFromJSON(
  jsonString: string,
): SafeParseResult<TransactionEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionEntity' from JSON`,
  );
}
